// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// essa linha só funciona em produção com postgress
// enum MovementsType{
//   In
//   OUT
// } */

model Devs {
  id String @id @default(cuid())
  firstName String
  lastName String
  email String @unique
  password String

  @@map("devs")
}

model Users {
  id String @id @default(cuid())
  firstName String
  lastName String
  email String @unique
  born  String
  cpf String @unique
  cellphone String @unique
  role String
  unitId String
  unit Units @relation(fields: [unitId], references: [id])
  products Products[]
  stockMovements StockMovements[]
  services Services[]
  commission Commissions[]

  @@map("users") 
} 

model Products{
  id String @id @default(cuid())
  userId String
  user Users @relation(fields: [userId], references: [id])
  nameProduct String
  weight Float
  nameWeight String
  amount Int
  cost Float
  price Float
  img String?
  describe String?
  stock Int @default(0)
  WorkTop String //yes or no
  movements StockMovements[]
  process ProductsToProcess[]
  services ProductsToServices[]

  @@map("produts")
}

model Process{
  id String @id @default(cuid())
  name String
  cost Float?
  price Float
  categoryId String
  typeId String
  barberShopId String
  barberShop BarberShop @relation(fields: [barberShopId], references: [id])
  type ProcessTypes @relation(fields: [typeId], references: [id])  
  category Categories @relation(fields: [categoryId], references: [id])
  products ProductsToProcess[]
  services ProcessToServices[]

  @@map("process")
}  

model Categories {
  id String @id @default(cuid())
  name String
  process Process[]
}

model ProductsToProcess{
  id String @id @default(cuid())
  processId String
  process Process @relation(fields: [processId], references: [id])
  productsId String
  products  Products @relation(fields: [productsId], references: [id])

  @@map("productsToProcess")
}

model ProcessTypes{
  id String @id @default(cuid())
  nameType String  
  process Process[]

  @@map("processTypes")
}

model StockMovements{
  id String @id @default(cuid())
  userId String
  user Users @relation(fields: [userId], references: [id])
  productId String
  product  Products @relation(fields: [productId], references: [id])
  type String
  quantity Int
  describe String?
  date  DateTime @default(now())

  @@map("stockMovements")
}

model BarberShop{
  id String @id @default(cuid())
  name String
  process Process[]
  unit Units[]

  @@map("barberShop")
}

model Units {
  id String @id @default(cuid())
  name String
  address String
  barbershopId String
  barbershop BarberShop @relation(fields: [barbershopId],references: [id])
  employees Users[]
  cashRegister CashRegisters?

  @@map("units")
}

model ProcessToServices{
  id String @id @default(cuid())
  servicesId String
  processId String
  services Services @relation(fields: [servicesId],references: [id])
  process Process @relation(fields: [processId],references: [id])

  @@map("processToServices")
}

model ProductsToServices{
  id String @id @default(cuid())
  servicesId String
  productsId String
  services Services @relation(fields: [servicesId], references: [id])
  products Products @relation(fields: [productsId], references: [id])
  
  @@map("productsToServices")
}

model Services{
  id String @id @default(cuid())
  userId String
  price Float
  date DateTime @default(now())
  process ProcessToServices[]
  products ProductsToServices[] 
  commission Commissions[]
  user Users @relation(fields: [userId], references: [id])

  @@map("services")
}

model Commissions {
  id String @id @default(cuid())
  userId String
  serviceId String
  amount Float
  date DateTime @default(now())
  user Users @relation(fields: [userId], references: [id])
  service Services @relation(fields: [serviceId], references: [id])  

}

model CashRegisters{
  id String @id @default(cuid())
  unitId String  @unique
  cash Float
  cashMovements CashMovements[]
  unit Units @relation(fields: [unitId], references: [id])
}

model CashMovements {
  id String @id @default(cuid())
  cashRegisterId String
  type String
  amount Float
  description String?
  date DateTime @default(now())
  cashRegister CashRegisters @relation(fields: [cashRegisterId],references: [id])
}

